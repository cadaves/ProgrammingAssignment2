help(file.exists)
args(lm)
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x,n) {
use <- x > n
x[use]
}
x <-1:20
above (x,12)
search()
packages()
x=list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
lapply(x, function(elt) elt[,1])
gl(2,1,20)
gl(2,2,20)
library(datasets)
data(iris)
?iris
head(iris, n=5)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
with(mtcars,tapply(mpg,cyl,mean))
mean(mtcars$mpg,mtcars$cyl)
with(mtcars,tapply(hp,cyl,mean))
by(iris,iris$Species, mean)
by(iris,iris$Species,mean(iris$Sepal.Length))
by(iris,iris$Species,function(iris$Sepal.Length) mean(iris$Sepal.Length))
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris,2,mean)
?iris
apply(iris[,1:5],2,mean)
apply(iris[,1:4],2,mean)
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
vector = tapply(mtcars$hp,mtcars$cyl,mean)
vector
diff = vector(3) - vector(1)
avghp=tapply(mtcars$hp,mtcars$cyl,mean)
avghp
str(avghp)
first=avghp[1]
first
diff=avghp[1]-avghp[3]
diff
library(swirl)
swirl()
x1c <- simbias()
apply(x1c,1,mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3)/2)
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
view(ravenData)
ravenData
mgl <- glm(ravenWinNum~ravenScore, binomial, ravenData)
mdl <- glm(ravenWinNum~ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
swirl()
library(swirl)
swirl()
var(rpois(1000,50))
head(hits)
class(hits[,"date"])
as.integer(head(hits[,"date"]))
mdl <- glm(visits ~ data,poisson, hits)
mdl <- glm(visits ~ date,poisson, hits)
summary(mdl)
exp(confint(mdl,"date"))
which.max(hits[,"visit"])
which.max(hits[,"visits"])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
help
mdl2 <-glm(simplystats ~ data, poisson, hits, offset=log(visits+1))
mdl2 <-glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
pakageversion("dplyr")
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran,ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(-(x:size)
)
select(-(x:size))
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country =="US")
?Comparison
filter(cran, r_version<="3.0.2", country =="IN")
filter(cran, country == "US"|country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size=size +1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
tbl(df(mydf))
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
help
main
main()
?n
?n_distinct
swirl()
submit("summarize1.R")
submit()
pack_sum
quantile(pack_sum$count,probs=0.99)
top_counts <-filter(pack_sum, count >679)
top_counts
head(top_counts,20)
arrange(top_counts, count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique,probs=0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique >465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
help
submit("chani2.R")
submit("chain2.R")
submit()
rest()
reset()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2, key=sex_class, value=count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, - grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
?gather
submit
submit()
submit()
submit()
?spread
?spread
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
students4
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
rbind_list(passed, failed)
sat
?select
?separate
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
exit(swirl)
setwd("~/GitHub/Coursera-R-programming/ProgrammingAssignment2")
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x) }
print(x)
}
x<-0
x
crazy()
x
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x) }
print(x)
}
x<-0
x
crazy()
crazy(0)
crazy <- function() {
x <- 3.14
print(x)
print(x)
x <<- 42
print(x)
print(x)
}
x<-0
x
crazy()
crazy <- function() {
x <- 3.14
print(x)
print(x)
x <- 42
print(x)
print(x)
}
x<-0
x
crazy()
crazy <- function() {
x <<- 3.14
print(x)
print(x)
x <- 42
print(x)
print(x)
}
x<-0
x
crazy()
